<%
=begin
apps: keycloak
platforms: kubernetes, tanzu-application-catalog
id: manage_passwords
title: Manage passwords
category: configuration
weight: 50
highlight: 50
=end %>

This chart provides several ways to manage passwords:

* Values passed to the chart
* An existing secret

### Values passed to the chart

In this scenario, a new secret including all the passwords will be created during the chart installation.

When upgrading, it is necessary to provide the secrets to the chart as shown below. Replace the KEYCLOAK_ADMIN_PASSWORD, KEYCLOAK_MANAGEMENT_PASSWORD, POSTGRESQL_PASSWORD and POSTGRESQL_PVC placeholders with the correct passwords and PVC name.

    $ helm upgrade keycloak bitnami/keycloak \
        --set auth.adminPassword=KEYCLOAK_ADMIN_PASSWORD \
        --set auth.managementPassword=KEYCLOAK_MANAGEMENT_PASSWORD \
        --set postgresql.postgresqlPassword=POSTGRESQL_PASSWORD \
        --set postgresql.persistence.existingClaim=POSTGRESQL_PVC

### Using an existing secret

##### Admin Password
To use an existing secret, use the *existingSecret* parameter, as shown below:

    auth:
      existingSecret: mysecret

By default, the chart will look for a key within the secret named *admin-password*, this can be changed by setting the *passwordSecretKey* parameter, as shown below:

    auth:
      existingSecret: mysecret
      passwordSecretKey: admin-password-key
      adminUser: admin

##### Postgres Credentials
The values for the Postgres subchart can also utilize an existing secret by using the *existingSecret* parameter, as shown below:

    postgresql:
      enabled: true
      existingSecret: mysecret

This will use the keys within the secret named *postgres-password* for the admin password, and *password* for the user password